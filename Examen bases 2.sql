--Mostrar todo el detalle de la matricula de los estudiantes, ordenar por numero de cuenta o código. Utilizar joins y mostrar los
--siguientes campos:
--Código del alumno
--Número de cuenta
--Nombre completo del alumno
--Codigo alterno de la sección
--Hora de inicio (Formato con AM/PM)
--Hora final (Formato con AM/PM)
--Días
--Nombre de la asignatura
--Nombre completo del maestro
---Periodo
--- Estado de la matricula





SELECT A.CODIGO_ALUMNO,
       A.NUMERO_CUENTA,
       G.NOMBRE || ' ' || G.APELLIDO AS NOMBRE_COMPLETO,
       B.CODIGO_ALTERNO,
       TO_CHAR(B.HORA_INICIO, 'hh:mi am') AS HORA_INICIO,  
       TO_CHAR(B.HORA_FIN, 'hh:mi am') AS HORA_FINAL,
       B.DIAS,
       C.NOMBRE_ASIGNATURA,
       E.NOMBRE || ' ' || E.APELLIDO AS NOMBRE_COMPLETO_MAESTRO,
       F.NOMBRE_PERIODO,
       H.NOMBRE_ESTADO
FROM TBL_MATRICULA I
INNER JOIN TBL_ALUMNOS A ON I.CODIGO_ALUMNO = A.CODIGO_ALUMNO
INNER JOIN TBL_SECCION B ON I.CODIGO_SECCION = B.CODIGO_SECCION
INNER JOIN TBL_ASIGNATURAS C ON B.CODIGO_ASIGNATURA = C.CODIGO_ASIGNATURA  
INNER JOIN TBL_MAESTROS D ON B.CODIGO_MAESTRO = D.CODIGO_MAESTRO
INNER JOIN TBL_PERSONAS E ON D.CODIGO_MAESTRO = E.CODIGO_PERSONA
INNER JOIN TBL_PERIODOS F ON B.CODIGO_PERIODO = F.CODIGO_PERIODO 
INNER JOIN TBL_PERSONAS G ON A.CODIGO_ALUMNO = G.CODIGO_PERSONA  
INNER JOIN TBL_ESTADOS_MATRICULA H ON I.CODIGO_ESTADO_MATRICULA = H.CODIGO_ESTADO_MATRICULA
ORDER BY A.NUMERO_CUENTA, A.CODIGO_ALUMNO


--Mostrar el listado de los estudiantes con la siguiente información (Para los cruces utilizar productos cartesianos y el operador (+) y with
--en caso de usar subconsultas):
--Nombre completo con cada inicial en mayúscula.
--Campus actual.
--Lugar de nacimiento (No utilizar las tablas de municipio, departamento, etc).
--Lugar de residencia (No utilizar las tablas de municipio, departamento, etc).
--Cantidad de asignaturas aprobadas (promedio según historial >= 65)
--Cantidad de asignaturas reprobadas (promedio según historial < 65)
--Cantidad de carreras matriculadas
--La cantidad de días transcurridos desde su fecha de nacimiento

 
 SELECT INITCAP(B.NOMBRE || ' ' || B.APELLIDO) AS NOMBRE_COMPLETO,  
       C.NOMBRE_CAMPUS AS CAMPUS_ACTUAL,
       D.NOMBRE_LUGAR AS LUGAR_NACIMIENTO,
       E.NOMBRE_LUGAR AS LUGAR_RESIDENCIA,       
       (SELECT COUNT(*) 
        FROM TBL_HISTORIAL F
        INNER JOIN TBL_DETALLE_EVALUACION DE ON F.CODIGO_HISTORIAL = DE.CODIGO_HISTORIAL
        WHERE F.CODIGO_ALUMNO = A.CODIGO_ALUMNO
        AND DE.VALOR_NOTA >= 65) AS ASIGNATURAS_APROBADAS,
       (SELECT COUNT(*)
        FROM TBL_HISTORIAL F
        INNER JOIN TBL_DETALLE_EVALUACION DE ON F.CODIGO_HISTORIAL = DE.CODIGO_HISTORIAL
        WHERE F.CODIGO_ALUMNO = A.CODIGO_ALUMNO
        AND DE.VALOR_NOTA < 65) AS ASIGNATURAS_REPROBADAS,
       (SELECT COUNT(*) 
        FROM TBL_CARRERAS_X_ALUMNOS 
        WHERE CODIGO_ALUMNO = A.CODIGO_ALUMNO) AS CARRERAS_MATRICULADAS,
       TRUNC(SYSDATE - B.FECHA_NACIMIENTO) AS DIAS_TRANSCURRIDOS   
FROM TBL_ALUMNOS A, TBL_PERSONAS B, TBL_CAMPUS C, 
     TBL_LUGARES D, TBL_LUGARES E
WHERE A.CODIGO_ALUMNO = B.CODIGO_PERSONA
AND B.CODIGO_CAMPUS = C.CODIGO_CAMPUS  
AND B.CODIGO_LUGAR_NACIMIENTO = D.CODIGO_LUGAR(+)
AND B.CODIGO_LUGAR_RESIDENCIA = E.CODIGO_LUGAR(+)


--Mostrar los alumnos con Magna Cum Laude (>= 90 promedio <=94) para cada carrera, puede darse el caso de que un estudiante tenga
--más de una carrera y en ambas sea Magna Cum Laude. Para este ejercicio NO utilizar el campo PROMEDIO_CARRERA de la tabla
--TBL_CARRERA_X_ALUMNOS, en su lugar hacer el cálculo del historial académico.
--(Para los cruces utilizar productos cartesianos y el operador (+) y with en caso de usar subconsultas):
--Información a mostrar:
--Nombre completo con cada inicial en mayúscula.
--Número de cuenta.
--Carrera
--Cantidad de asignaturas cursadas
-- Promedio para dicha carrera:  UV * Promedio por asignatura/Sumatoria del total de UV por carrera.


WITH UV_TOTALES_X_CARRERA AS (
    SELECT CODIGO_CARRERA, COUNT(1) UV_CARRERA
    FROM TBL_ASIGNATURAS 
    GROUP BY CODIGO_CARRERA
),
PROMEDIO_ASIGNATURAS AS (
    SELECT CODIGO_ALUMNO, ROUND(AVG(PROMEDIO)) PROM_ASIGNATURA
    FROM TBL_HISTORIAL
    GROUP BY CODIGO_ALUMNO
)
SELECT A.CODIGO_ALUMNO, INITCAP(B.NOMBRE) || ' ' || INITCAP(B.APELLIDO) NOMBRE_COMPLETO,
        D.NOMBRE_CARRERA,
        ROUND((G.CANTIDAD_UNIDADES_VALORATIVAS * E.PROM_ASIGNATURA) / F.UV_CARRERA) PROMEDIO_PONDERADO
FROM TBL_ALUMNOS A
LEFT JOIN TBL_PERSONAS B ON A.CODIGO_ALUMNO = B.CODIGO_PERSONA
LEFT JOIN TBL_CARRERAS_X_ALUMNOS C ON B.CODIGO_PERSONA = C.CODIGO_ALUMNO
LEFT JOIN TBL_CARRERAS D ON C.CODIGO_CARRERA = D.CODIGO_CARRERA
LEFT JOIN PROMEDIO_ASIGNATURAS E ON A.CODIGO_ALUMNO = E.CODIGO_ALUMNO
LEFT JOIN UV_TOTALES_X_CARRERA F ON D.CODIGO_CARRERA = F.CODIGO_CARRERA
LEFT JOIN TBL_ASIGNATURAS G ON D.CODIGO_CARRERA = G.CODIGO_CARRERA
WHERE ROUND((G.CANTIDAD_UNIDADES_VALORATIVAS * E.PROM_ASIGNATURA) / F.UV_CARRERA) BETWEEN 90 AND 94;


---Almacenar el resultado de la consulta anterior en una tabla.
-- CREAMOS LA NUEVA TABLA
CREATE TABLE ALUMNOSXMAGNA (
    CODIGO_ALUMNO NUMBER,
    NOMBRE_COMPLETO VARCHAR2(255),
    NOMBRE_CARRERA VARCHAR2(255),
    PROMEDIO_PONDERADO NUMBER
);

-- INSERTAMOS LOS DATOS
INSERT INTO ALUMNOSXMAGNA (
    CODIGO_ALUMNO,
    NOMBRE_COMPLETO,
    NOMBRE_CARRERA,
    PROMEDIO_PONDERADO
)
--VOLVEMOS A ESCRIBIR EL SCRIPT PARA HACER UNA INSERSION CONTINUA
WITH UV_TOTALES_X_CARRERA AS (
    SELECT CODIGO_CARRERA, COUNT(1) UV_CARRERA
    FROM TBL_ASIGNATURAS 
    GROUP BY CODIGO_CARRERA
),
PROMEDIO_ASIGNATURAS AS (
    SELECT CODIGO_ALUMNO, ROUND(AVG(PROMEDIO)) PROM_ASIGNATURA
    FROM TBL_HISTORIAL
    GROUP BY CODIGO_ALUMNO
)
SELECT A.CODIGO_ALUMNO, INITCAP(B.NOMBRE) || ' ' || INITCAP(B.APELLIDO) NOMBRE_COMPLETO,
        D.NOMBRE_CARRERA,
        ROUND((G.CANTIDAD_UNIDADES_VALORATIVAS * E.PROM_ASIGNATURA) / F.UV_CARRERA) PROMEDIO_PONDERADO
FROM TBL_ALUMNOS A
LEFT JOIN TBL_PERSONAS B ON A.CODIGO_ALUMNO = B.CODIGO_PERSONA
LEFT JOIN TBL_CARRERAS_X_ALUMNOS C ON B.CODIGO_PERSONA = C.CODIGO_ALUMNO
LEFT JOIN TBL_CARRERAS D ON C.CODIGO_CARRERA = D.CODIGO_CARRERA
LEFT JOIN PROMEDIO_ASIGNATURAS E ON A.CODIGO_ALUMNO = E.CODIGO_ALUMNO
LEFT JOIN UV_TOTALES_X_CARRERA F ON D.CODIGO_CARRERA = F.CODIGO_CARRERA
LEFT JOIN TBL_ASIGNATURAS G ON D.CODIGO_CARRERA = G.CODIGO_CARRERA
WHERE ROUND((G.CANTIDAD_UNIDADES_VALORATIVAS * E.PROM_ASIGNATURA) / F.UV_CARRERA) BETWEEN 90 AND 94;

SELECT * 
FROM ALUMNOSXMAGNA


--Mostrar todas las carreras con la siguiente información:
--Código auxiliar de la carrera
--Nombre de la carrera
--Cantidad de asignaturas (No utilizar el campo de la tabla de carreras, calcularlo)
--Cantidad de unidades valorativas de la carrera (No utilizar el campo de la tabla de carreras, calcularlo)
--Cantidad de estudiantes
--Promedio en base del promedio de los estudiantes (Usar el campo promedio carrera de los estudiantes)
--Grado de la carrera
--Nombre del estudiante con mejor promedio (Usar el campo promedio carrera de los estudiantes)

WITH CarreraInfo AS (
    SELECT
        C.NOMBRE_CARRERA,
        C.CODIGO_AUXILIAR,
        COUNT(DISTINCT A.CODIGO_ASIGNATURA) AS CANTIDAD_ASIGNATURAS,
        SUM(A.CANTIDAD_UNIDADES_VALORATIVAS) AS UV_CANTIDAD,
        COUNT(DISTINCT CXA.CODIGO_ALUMNO) AS TOTAL_ESTUDIANTES,
        AVG(CXA.PROMEDIO_CARRERA) AS PROMEDIO_CARRERA,
        C.CODIGO_CARRERA,
        C.CODIGO_GRADO,
        P.NOMBRE || ' ' || P.APELLIDO AS NOMBRE_COMPLETO
    FROM
        TBL_CARRERAS C
        LEFT JOIN TBL_CARRERAS_X_ALUMNOS CXA ON (C.CODIGO_CARRERA = CXA.CODIGO_CARRERA)
        LEFT JOIN TBL_HISTORIAL H ON (CXA.CODIGO_ALUMNO = H.CODIGO_ALUMNO)
        LEFT JOIN TBL_ASIGNATURAS A ON (C.CODIGO_CARRERA = A.CODIGO_CARRERA)
        LEFT JOIN TBL_PERSONAS P ON (CXA.CODIGO_ALUMNO = P.CODIGO_PERSONA)
    GROUP BY
        C.NOMBRE_CARRERA,
        C.CODIGO_AUXILIAR,
        C.CODIGO_CARRERA,
        P.NOMBRE,
        P.APELLIDO,
        C.CODIGO_GRADO
        
)
, Mejor_Promedio_Estudiante AS (
    SELECT
        CI.CODIGO_CARRERA,
        MAX(CXA.PROMEDIO_CARRERA) AS MEJOR_PROMEDIO
    FROM
        CarreraInfo CI
        LEFT JOIN TBL_CARRERAS_X_ALUMNOS CXA ON (CI.CODIGO_CARRERA = CXA.CODIGO_CARRERA)
    GROUP BY
        CI.CODIGO_CARRERA
)
SELECT
    CI.*,
    P.NOMBRE || ' ' || P.APELLIDO AS MEJOR_PROMEDIO_NOMBRE
FROM
    CarreraInfo CI
    LEFT JOIN Mejor_Promedio_Estudiante MPE ON (CI.CODIGO_CARRERA = MPE.CODIGO_CARRERA)
    LEFT JOIN TBL_CARRERAS_X_ALUMNOS CXA ON (MPE.CODIGO_CARRERA = CXA.CODIGO_CARRERA AND MPE.MEJOR_PROMEDIO = CXA.PROMEDIO_CARRERA)
    LEFT JOIN TBL_PERSONAS P ON (CXA.CODIGO_ALUMNO = P.CODIGO_PERSONA);


--Mostrar el listado de todas las secciones con la siguiente información:
--• Código Alterno
--• Hora Inicio (Formato AM/PM).
--• Hora Fin (Formato de AM/PM).
--• Nombre completo del maestro.
--• Numero de aula
--• Nombre del edificicio
--• Nombre de la asignatura
--• Unidades valorativas
--• Campus
--• Cantidad de días para que comience el periodo (pueden ser valores negativos, indicaría que ya pasó la fecha)
--• Cantidad de días para que finalice el periodo (pueden ser valores negativos, indicaría que ya pasó la fecha)
--• Cantidad de cupos libres


WITH ALUMNOS_MATRICULADOS AS (
    SELECT B.CODIGO_SECCION, COUNT(B.CODIGO_SECCION) AL_MAT
    FROM TBL_ALUMNOS A
    INNER JOIN TBL_MATRICULA B
    ON (A.CODIGO_ALUMNO = B.CODIGO_ALUMNO)
    WHERE B.CODIGO_ESTADO_MATRICULA = 1
    GROUP BY B.CODIGO_SECCION
),
ALUMNOS_LISTA_ESPERA AS (
    SELECT B.CODIGO_SECCION, COUNT(B.CODIGO_SECCION) AL_ESPERA
    FROM TBL_ALUMNOS A
    INNER JOIN TBL_MATRICULA B
    ON (A.CODIGO_ALUMNO = B.CODIGO_ALUMNO)
    WHERE B.CODIGO_ESTADO_MATRICULA = 2
    GROUP BY B.CODIGO_SECCION
)
SELECT  A.CODIGO_ALTERNO, A.HORA_INICIO, A.HORA_FIN,
        INITCAP(D.NOMBRE) ||' '|| INITCAP(D.APELLIDO) NOMBRE_COMPLETO_MAESTRO,
        TO_CHAR(E.FECHA_INICIO, 'DD/MM/YYYY') INICIO_PERIODO,
        TO_CHAR(E.FECHA_FIN, 'DD/MM/YYYY') FIN_PERIODO,
        F.AL_MAT ALUMNOS_MATRICULADOS,
        G.AL_ESPERA ALUMNOS_EN_LISTA_ESPERA,
        A.CANTIDAD_CUPOS CUPOS_TOTALES,
        A.CANTIDAD_CUPOS - F.AL_MAT CUPOS_LIBRES
FROM TBL_SECCION A
LEFT JOIN TBL_MAESTROS B
ON (A.CODIGO_MAESTRO = B.CODIGO_MAESTRO)
LEFT JOIN TBL_EMPLEADOS C
ON (B.CODIGO_MAESTRO = C.CODIGO_EMPLEADO)
LEFT JOIN TBL_PERSONAS D
ON (C.CODIGO_EMPLEADO = D.CODIGO_PERSONA)
LEFT JOIN TBL_PERIODOS E
ON (A.CODIGO_SECCION = E.CODIGO_PERIODO)
LEFT JOIN ALUMNOS_MATRICULADOS F
ON (A.CODIGO_SECCION = F.CODIGO_SECCION)
LEFT JOIN ALUMNOS_LISTA_ESPERA G
ON (A.CODIGO_SECCION = G.CODIGO_SECCION);

--Mostrar que estudiantes tienen asignaturas matriculadas sin requisito
SELECT DISTINCT
    A.CODIGO_ALUMNO,
    INITCAP(P.NOMBRE || ' ' || P.APELLIDO) AS NOMBRE_COMPLETO
FROM
    TBL_ALUMNOS A
JOIN
    TBL_MATRICULA M ON A.CODIGO_ALUMNO = M.CODIGO_ALUMNO
JOIN
    TBL_PERSONAS P ON A.CODIGO_ALUMNO = P.CODIGO_PERSONA
WHERE
    M.CODIGO_ESTADO_MATRICULA = 1; 

    ---APENAS ESTABA PLANTEANDOLO 


